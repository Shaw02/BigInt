#pragma once

//======================================================================
//		モンゴメリ（montgomery reduction）
//----------------------------------------------------------------------
//  Reference:
//		http://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%82%B4%E3%83%A1%E3%83%AA%E4%B9%97%E7%AE%97
//======================================================================
//
//		除算を実質的に行うことなく、余剰を求めるアルゴリズムです。
//		演算はモンゴメリ表現で計算し、計算が終わった段階で逆変換すれば、余剰が求まる。
//
//		【Montgomery Reduction（モンゴメリリダクション）】
//		MR( T )	＝ T × R-1 mod N
//				＝ (T ＋ (T × N' mod R) × N) ÷ R
//
//		※Rは2の冪にするので、Rの除算はビットシフト、Rの余剰は論理積で求まる。
//
//		【モンゴメリ表現への変換と逆変換】
//		A ＝ MR( a × R2 )		…　モンゴメリ表現への変換
//		a ＝ MR( A )			…	逆変換
//		※R2 = R × R mod N
//
//		【モンゴメリ表現での計算】
//		《加減算》
//		C ＝ A ＋ B
//		if (c ＜ 0) then C ＝ C ＋ N
//		if (C ≧ N) then C ＝ C − N
//		
//		《乗算》
//		C ＝ MR( A × B )			… Rが掛けられるので、モンゴメリリダクションする（R-1を掛ける）。
//
//		但し、単純に、c = a × b mod Nを求めるに当たっては、
//		c = MR( MR(a × b) × R2 )		の方が効率的
//
//		
//						Copyright (c) A.Watanabe (2012)
//
//----------------------------------------------------------------------
//	Revision
//		2012. 7. 	初版
//======================================================================
/****************************************************************/
/*			定数定義											*/
/****************************************************************/


/****************************************************************/
/*			プロトタイプ宣言									*/
/****************************************************************/


/****************************************************************/
/*			クラス定義											*/
/****************************************************************/
class montgomery
{
private:
				BigInt	m_N;		//法
				BigInt	m_invN;		//
				BigInt	m_R2;		//R2
				BigInt	m_R_1;		//R-1
	unsigned	int		m_m;		//

public:
	//--------------
	//関数
	montgomery(void);								//
	~montgomery(void);								//

	void	Set_Modulo(BigInt* N);					//Set Modulo
	void	MR(BigInt* result, BigInt T);			//Montgomery reduction

	void	Mul(	BigInt* dst,	 BigInt& src1, BigInt& src2);
	void	Power(	BigInt* _Result, BigInt& _Src1, BigInt& _Src2);
};
